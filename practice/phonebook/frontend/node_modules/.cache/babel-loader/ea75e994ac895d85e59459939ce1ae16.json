{"ast":null,"code":"var _jsxFileName = \"D:\\\\node\\\\FrontEnd\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Note from './components/Note';\nimport { useState, useEffect } from 'react';\nimport noteService from './services/notes';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...'); //effect/ the function will be executed after App is rendered\n\n  useEffect(() => {\n    noteService.getAll().then(data => {\n      setNotes(data);\n    });\n  }, []);\n  const notesToShow = showAll ? notes : notes.filter(ele => ele.important);\n  console.log(notesToShow);\n\n  const addNote = event => {\n    event.preventDefault(); //prevent the page from reloading, as most events natrually cause\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }; //the system will automatically generate the id for each note\n\n    noteService.create(noteObject).then(data => {\n      setNotes(notes.concat(data));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  }; //to change the importance of the said note\n\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(ele => ele.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    noteService.update(id, changedNote).then(data => {\n      setNotes(notes.map(ele => ele.id === id ? data : ele));\n    }).catch(() => {\n      setErrorMessage(`the note '${note.content}' was already deleted from server`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 46\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: [\"show \", showAll ? 'important' : 'all']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        toggleImportance: () => toggleImportanceOf(note.id)\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addNote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newNote,\n        onChange: handleNoteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"w042hEqjNimQQblNPCOnOst6jIs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/node/FrontEnd/src/App.js"],"names":["Note","useState","useEffect","noteService","Notification","Footer","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","getAll","then","data","notesToShow","filter","ele","important","console","log","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","Math","random","create","concat","handleNoteChange","target","value","toggleImportanceOf","id","note","find","changedNote","update","map","catch","setTimeout","n"],"mappings":"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","sourcesContent":["import Note from './components/Note'\nimport { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  //effect/ the function will be executed after App is rendered\n  useEffect(() => {\n    noteService.getAll()\n    .then(data => {\n      setNotes(data)\n    })\n  }, [])\n\n  const notesToShow = showAll ?\n    notes \n    : notes.filter(ele => ele.important)\n  console.log(notesToShow)\n  const addNote = (event) => {\n    event.preventDefault() //prevent the page from reloading, as most events natrually cause\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() <0.5,\n    } //the system will automatically generate the id for each note\n    \n    noteService\n      .create(noteObject)    \n      .then(data => {\n        setNotes(notes.concat(data))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n  //to change the importance of the said note\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(ele => ele.id === id)\n    const changedNote = {...note, important: !note.important}\n    noteService\n      .update(id,changedNote)\n      .then(data => {\n        setNotes(notes.map(ele => ele.id === id? data : ele))\n      })\n      .catch(() => {      \n        setErrorMessage(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        },5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/> <br />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note \n            key={note.id} \n            note={note} \n            toggleImportance = {() => toggleImportanceOf(note.id)}  \n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type='submit'>save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}