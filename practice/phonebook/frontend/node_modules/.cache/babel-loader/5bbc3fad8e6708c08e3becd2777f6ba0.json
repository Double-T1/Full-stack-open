{"ast":null,"code":"var _jsxFileName = \"D:\\\\node\\\\practice\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Note from './components/Note';\nimport { useState, useEffect } from 'react';\nimport noteService from './services/notes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true); //effect/ the function will be executed after App is rendered\n\n  useEffect(() => {\n    noteService.getAll().then(response => {\n      setNotes(response.data);\n    });\n  }, []);\n  const notesToShow = showAll ? notes : notes.filter(ele => ele.important);\n\n  const addNote = event => {\n    event.preventDefault(); //prevent the page from reloading, as most events natrually cause\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }; //the system will automatically generate the id for each note\n\n    noteService.create(noteObject).then(response => {\n      setNotes(notes.concat(response.data));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  }; //to change the importance of the said note\n\n\n  const toggleImportanceOf = id => {\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find(ele => ele.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    noteService.update(id, changedNote).then(res => {\n      setNotes(notes.map(ele => ele.id === id ? res.data : ele));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: [\"show \", showAll ? 'important' : 'all']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        toggleImportance: () => toggleImportanceOf(note.id)\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addNote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newNote,\n        onChange: handleNoteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pWt+h/qwVIdF8jjamHMFP8GBojs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/node/practice/src/App.js"],"names":["Note","useState","useEffect","noteService","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","getAll","then","response","data","notesToShow","filter","ele","important","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","Math","random","create","concat","handleNoteChange","target","value","toggleImportanceOf","id","url","note","find","changedNote","update","res","map"],"mappings":"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","sourcesContent":["import Note from './components/Note'\nimport { useState, useEffect } from 'react'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n\n  //effect/ the function will be executed after App is rendered\n  useEffect(() => {\n    noteService.getAll()\n    .then(response => {\n      setNotes(response.data)\n    })\n  }, [])\n\n  const notesToShow = showAll ?\n    notes \n    : notes.filter(ele => ele.important)\n\n  const addNote = (event) => {\n    event.preventDefault() //prevent the page from reloading, as most events natrually cause\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() <0.5,\n    } //the system will automatically generate the id for each note\n    \n    noteService\n      .create(noteObject)    \n      .then(response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n  //to change the importance of the said note\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`\n\n    const note = notes.find(ele => ele.id === id)\n    const changedNote = {...note, important: !note.important}\n    noteService\n      .update(id,changedNote)\n      .then(res => {\n        setNotes(notes.map(ele => ele.id === id? res.data : ele))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note \n            key={note.id} \n            note={note} \n            toggleImportance = {() => toggleImportanceOf(note.id)}  \n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type='submit'>save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}