{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\william\\\\Desktop\\\\node\\\\homework\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Button = _ref => {\n  let {\n    onClick,\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = Button;\n\nconst Inference = _ref2 => {\n  let {\n    good,\n    sum\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"all \", sum]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"average \", sum / 3]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"positive \", good / sum * 100, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Inference;\n\nconst Stats = _ref3 => {\n  let {\n    text,\n    stats\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [text, \" \", stats]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c3 = Stats;\n\nconst AllStats = _ref4 => {\n  let {\n    good,\n    neutral,\n    bad\n  } = _ref4;\n\n  if (good + neutral + bad > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Stats, {\n        text: \"good\",\n        stats: good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {\n        text: \"neutral\",\n        stats: neutral\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stats, {\n        text: \"bad\",\n        stats: bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Inference, {\n        good: good,\n        sum: sum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"no feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = AllStats;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleClick = (state, setState) => () => setState(state + 1);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick(good, setGood),\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick(neutral, setNeutral),\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick(bad, setBad),\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AllStats, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"fmrB0CGTHg5GliZXC0zedwwuQzY=\");\n\n_c5 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Inference\");\n$RefreshReg$(_c3, \"Stats\");\n$RefreshReg$(_c4, \"AllStats\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["C:/Users/william/Desktop/node/homework/src/App.js"],"names":["useState","Button","onClick","text","Inference","good","sum","Stats","stats","AllStats","neutral","bad","App","setGood","setNeutral","setBad","handleClick","state","setState"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;;;AAEA,MAAMC,MAAM,GAAG,QAAoB;AAAA,MAAnB;AAACC,IAAAA,OAAD;AAASC,IAAAA;AAAT,GAAmB;AACjC,sBACE;AAAA,2BACE;AAAQ,MAAA,OAAO,EAAED,OAAjB;AAAA,gBAA2BC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAND;;KAAMF,M;;AAQN,MAAMG,SAAS,GAAG,SAAgB;AAAA,MAAf;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,GAAe;AAChC,sBACE;AAAA,4BACE;AAAA,yBAAQA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BAAYA,GAAG,GAAC,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BAAcD,IAAI,GAACC,GAAN,GAAW,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CARD;;MAAMF,S;;AAUN,MAAMG,KAAK,GAAG,SAAkB;AAAA,MAAjB;AAACJ,IAAAA,IAAD;AAAMK,IAAAA;AAAN,GAAiB;AAC9B,sBACE;AAAA,2BACE;AAAA,iBAAIL,IAAJ,OAAWK,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAND;;MAAMD,K;;AAQN,MAAME,QAAQ,GAAG,SAAwB;AAAA,MAAvB;AAACJ,IAAAA,IAAD;AAAMK,IAAAA,OAAN;AAAcC,IAAAA;AAAd,GAAuB;;AACvC,MAAIN,IAAI,GAACK,OAAL,GAAaC,GAAb,GAAiB,CAArB,EAAwB;AACtB,wBACE;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAEN;AAA1B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,SAAZ;AAAsB,QAAA,KAAK,EAAEK;AAA7B;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,KAAZ;AAAkB,QAAA,KAAK,EAAEC;AAAzB;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEN,IAAjB;AAAuB,QAAA,GAAG,EAAEC;AAA5B;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AACD,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAjBD;;MAAMG,Q;;AAmBN,MAAMG,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACP,IAAD,EAAMQ,OAAN,IAAiBb,QAAQ,CAAC,CAAD,CAA/B;AACA,QAAM,CAACU,OAAD,EAASI,UAAT,IAAuBd,QAAQ,CAAC,CAAD,CAArC;AACA,QAAM,CAACW,GAAD,EAAKI,MAAL,IAAef,QAAQ,CAAC,CAAD,CAA7B;;AAEA,QAAMgB,WAAW,GAAG,CAACC,KAAD,EAAOC,QAAP,KAAoB,MAAMA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAtD;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAED,WAAW,CAACX,IAAD,EAAMQ,OAAN,CAA5B;AAA4C,MAAA,IAAI,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEG,WAAW,CAACN,OAAD,EAASI,UAAT,CAA5B;AAAkD,MAAA,IAAI,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEE,WAAW,CAACL,GAAD,EAAKI,MAAL,CAA5B;AAA0C,MAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEV,IAAhB;AAAsB,MAAA,OAAO,EAAEK,OAA/B;AAAwC,MAAA,GAAG,EAAEC;AAA7C;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAjBD;;GAAMC,G;;MAAAA,G;AAmBN,eAAeA,GAAf","sourcesContent":["import {useState} from 'react'\n\nconst Button = ({onClick,text}) => {\n  return (\n    <>\n      <button onClick={onClick}>{text}</button>\n    </>\n  )\n}\n\nconst Inference = ({good,sum}) => {\n  return (\n    <div>\n      <p>all {sum}</p>\n      <p>average {sum/3}</p>\n      <p>positive {(good/sum)*100}%</p>\n    </div>\n  )\n}\n\nconst Stats = ({text,stats}) => {\n  return (\n    <>\n      <p>{text} {stats}</p>\n    </>\n  )\n}\n\nconst AllStats = ({good,neutral,bad}) => {\n  if (good+neutral+bad>0) {\n    return (\n      <div>\n        <Stats text='good' stats={good} />\n        <Stats text='neutral' stats={neutral} />\n        <Stats text='bad' stats={bad} />\n        <Inference good={good} sum={sum} />\n      </div>\n    )\n  } \n  return (\n    <div>\n      <h5>no feedback given</h5>\n    </div>\n  )\n  \n}\n\nconst App = () => {\n  const [good,setGood] = useState(0) \n  const [neutral,setNeutral] = useState(0) \n  const [bad,setBad] = useState(0) \n\n  const handleClick = (state,setState) => () => setState(state+1)\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button onClick={handleClick(good,setGood)} text='good'/>\n      <Button onClick={handleClick(neutral,setNeutral)} text='neutral'/>\n      <Button onClick={handleClick(bad,setBad)} text='bad'/>\n      <h2>statistics</h2>\n      <AllStats good={good} neutral={neutral} bad={bad} />\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}