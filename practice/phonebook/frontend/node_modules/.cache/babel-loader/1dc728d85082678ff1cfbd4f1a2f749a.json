{"ast":null,"code":"var _jsxFileName = \"D:\\\\node\\\\practice\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Note from './components/Note';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true); //effect/ the function will be executed after App is rendered\n\n  useEffect(() => {\n    console.log('effect');\n    axios.get('http://localhost:3001/notes').then(response => {\n      setNotes(response.data);\n    });\n  }, []);\n  const notesToShow = showAll ? notes : notes.filter(ele => ele.important);\n\n  const addNote = event => {\n    event.preventDefault(); //prevent the page from reloading, as most events natrually cause\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    };\n    setNotes(notes.concat(noteObject));\n    setNewNote('');\n  };\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: [\"show \", showAll ? 'important' : 'all']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addNote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newNote,\n        onChange: handleNoteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pWt+h/qwVIdF8jjamHMFP8GBojs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/node/practice/src/App.js"],"names":["Note","useState","useEffect","axios","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","console","log","get","then","response","data","notesToShow","filter","ele","important","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","Math","random","id","length","concat","handleNoteChange","target","value","map","note"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,eAAD,CAAtC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC,CAHgB,CAKhB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAT,IAAAA,KAAK,CAACU,GAAN,CAAU,6BAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAChBT,MAAAA,QAAQ,CAACS,QAAQ,CAACC,IAAV,CAAR;AACD,KAHD;AAID,GANQ,EAMN,EANM,CAAT;AAQA,QAAMC,WAAW,GAAGR,OAAO,GACzBJ,KADyB,GAEvBA,KAAK,CAACa,MAAN,CAAaC,GAAG,IAAIA,GAAG,CAACC,SAAxB,CAFJ;;AAIA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACzBA,IAAAA,KAAK,CAACC,cAAN,GADyB,CACF;;AACvB,UAAMC,UAAU,GAAG;AACjBC,MAAAA,OAAO,EAAElB,OADQ;AAEjBmB,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFW;AAGjBR,MAAAA,SAAS,EAAES,IAAI,CAACC,MAAL,KAAe,GAHT;AAIjBC,MAAAA,EAAE,EAAE1B,KAAK,CAAC2B,MAAN,GAAa;AAJA,KAAnB;AAOA1B,IAAAA,QAAQ,CAACD,KAAK,CAAC4B,MAAN,CAAaT,UAAb,CAAD,CAAR;AACAhB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAXD;;AAaA,QAAM0B,gBAAgB,GAAIZ,KAAD,IAAW;AAClCd,IAAAA,UAAU,CAACc,KAAK,CAACa,MAAN,CAAaC,KAAd,CAAV;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAE,MAAM1B,UAAU,CAAC,CAACD,OAAF,CAAjC;AAAA,4BACQA,OAAO,GAAE,WAAF,GAAgB,KAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAA,gBACGQ,WAAW,CAACoB,GAAZ,CAAgBC,IAAI,iBACnB,QAAC,IAAD;AAAoB,QAAA,IAAI,EAAEA;AAA1B,SAAWA,IAAI,CAACP,EAAhB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAPF,eAYE;AAAM,MAAA,QAAQ,EAAEV,OAAhB;AAAA,8BACE;AAAO,QAAA,KAAK,EAAEd,OAAd;AAAuB,QAAA,QAAQ,EAAE2B;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAtDD;;GAAM9B,G;;KAAAA,G;AAwDN,eAAeA,GAAf","sourcesContent":["import Note from './components/Note'\nimport { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n\n  //effect/ the function will be executed after App is rendered\n  useEffect(() => {\n    console.log('effect')\n    axios.get('http://localhost:3001/notes')\n    .then(response => {\n      setNotes(response.data)\n    })\n  }, [])\n\n  const notesToShow = showAll ?\n    notes \n    : notes.filter(ele => ele.important)\n\n  const addNote = (event) => {\n    event.preventDefault() //prevent the page from reloading, as most events natrually cause\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() <0.5,\n      id: notes.length+1\n    }\n    \n    setNotes(notes.concat(noteObject))\n    setNewNote('')\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type='submit'>save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}